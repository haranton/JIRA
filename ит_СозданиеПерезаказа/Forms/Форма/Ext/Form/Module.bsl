
#Область ОбработчикиСобытийФормы

 &НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры, "ДатаЗаказа, Заказ, МагазинПолучатель, СкладОтправитель");
	
	Если Параметры.Свойство("Товары") Тогда
		ЗаполнитьТЧТовары(Параметры.Товары);
	КонецЕсли;
	
	ЗаполнитьДанные();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Сообщение = Новый СообщениеПользователю;
		
	//Проверка заполненности отправителя
	Если Не ЗначениеЗаполнено(Объект.ПодразделениеОтправитель) Тогда
		Сообщение.Текст = "В складе отправителе не указано подразделение";
		Сообщение.Поле = "Объект.СкладОтправитель";  
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ОрганизацияОтправитель) Тогда
		Сообщение.Текст = "В подразделении " + Объект.ПодразделениеОтправитель + " не указана организация";
		Сообщение.Поле = "Объект.ПодразделениеОтправитель"; 
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.КонтрагентОтправитель) Тогда
		Сообщение.Текст = "Для организации " + Объект.ОрганизацияОтправитель + " не указан контрагент";
		Сообщение.Поле = "Объект.ОрганизацияОтправитель"; 
		Сообщение.Сообщить();
		Отказ = Истина;		
		Возврат;
	КонецЕсли;
	
	//Проверка заполненности получателя
	Если Не ЗначениеЗаполнено(Объект.ОрганизацияПолучатель) Тогда
		Сообщение.Текст = "В подразделении " + Объект.ПодразделениеПолучатель + " не указана организация";
		Сообщение.Поле = "Объект.ПодразделениеОтправитель"; 
		Сообщение.Сообщить();
		Отказ = Истина;		
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.КонтрагентПолучатель) Тогда
		Сообщение.Текст = "Для организации " + Объект.ОрганизацияПолучатель + " не указан контрагент";
		Сообщение.Поле = "Объект.ОрганизацияОтправитель"; 
		Сообщение.Сообщить();
		Отказ = Истина;		
		Возврат;
	КонецЕсли;
	
	//Проверка заполненности соглашения и договора реализации
	Если Не ЗначениеЗаполнено(Объект.СоглашениеРеализации) Тогда
		Сообщение.Текст = "Не найдено соглашение организации " 
							+ Объект.ОрганизацияОтправитель + " с контрагентом " + Объект.КонтрагентПолучатель;					
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДоговорРеализации) Тогда
		Сообщение.Текст = "Не заполнен договор в соглашении " + Объект.СоглашениеРеализации;
		Сообщение.Поле = "Объект.СоглашениеРеализации"; 
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	//Проверка заполненности соглашения и договора приобретения
	Если Не ЗначениеЗаполнено(Объект.СоглашениеПриобретения) Тогда
		Сообщение.Текст = "Не найдено соглашение организации " 
							+ Объект.ОрганизацияПолучатель + " с контрагентом " + Объект.КонтрагентОтправитель;
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(Объект.ДоговорПриобретения) Тогда
		Сообщение.Текст = "Не заполнен договор в соглашении " + Объект.СоглашениеПриобретения;
		Сообщение.Поле = "Объект.СоглашениеПриобретения"; 
		Сообщение.Сообщить();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкладОтгрузкиПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.СкладОтправитель) Тогда
		ЗаполнитьДанные();
	Иначе
		ОчиститьПоля();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МагазинПолучательПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.МагазинПолучатель) Тогда
		ЗаполнитьДанные();
	Иначе
		ОчиститьПоля();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоглашениеРеализацииПриИзменении(Элемент)
	Объект.ДоговорРеализации = ПолучитьДоговорПоСоглашению(Объект.СоглашениеРеализации);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОформитьПерепродажу(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда      
        Возврат;  
    КонецЕсли;
	
	ОформитьПерепродажуНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьДанные()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СтруктураПредприятия.Ссылка, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)) КАК ПодразделениеОтправитель,
	|	ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияОтправитель,
	|	Склады.Ссылка КАК СкладОтправитель,
	|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентОтправитель
	|ПОМЕСТИТЬ втОтправитель
	|ИЗ
	|	Справочник.Склады КАК Склады
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ПО Склады.Подразделение = СтруктураПредприятия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО (СтруктураПредприятия.ит_Организация = Организации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО (Организации.Ссылка = Контрагенты.ит_Организация)
	|ГДЕ
	|	Склады.Ссылка = &СкладОтправитель
	|	И НЕ Склады.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК ПодразделениеПолучатель,
	|	ЕСТЬNULL(Организации.Ссылка, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ОрганизацияПолучатель,
	|	ЕСТЬNULL(Контрагенты.Ссылка, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК КонтрагентПолучатель,
	|	СтруктураПредприятия.ит_СкладТорговыйЗал КАК СкладПолучатель
	|ПОМЕСТИТЬ втПолучатель
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|			ПО Организации.Ссылка = Контрагенты.ит_Организация
	|		ПО СтруктураПредприятия.ит_Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ СтруктураПредприятия.ПометкаУдаления
	|	И СтруктураПредприятия.Ссылка = &МагазинПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтправитель.ПодразделениеОтправитель КАК ПодразделениеОтправитель,
	|	втОтправитель.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	втОтправитель.СкладОтправитель КАК СкладОтправитель,
	|	втОтправитель.КонтрагентОтправитель КАК КонтрагентОтправитель,
	|	втПолучатель.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	|	втПолучатель.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	втПолучатель.КонтрагентПолучатель КАК КонтрагентПолучатель,
	|	втПолучатель.СкладПолучатель КАК СкладПолучатель
	|ПОМЕСТИТЬ втДанныеОтправителяИПолучателя
	|ИЗ
	|	втОтправитель КАК втОтправитель,
	|	втПолучатель КАК втПолучатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеОтправителяИПолучателя.ПодразделениеОтправитель КАК ПодразделениеОтправитель,
	|	втДанныеОтправителяИПолучателя.ОрганизацияОтправитель КАК ОрганизацияОтправитель,
	|	втДанныеОтправителяИПолучателя.СкладОтправитель КАК СкладОтправитель,
	|	втДанныеОтправителяИПолучателя.КонтрагентОтправитель КАК КонтрагентОтправитель,
	|	втДанныеОтправителяИПолучателя.ПодразделениеПолучатель КАК ПодразделениеПолучатель,
	|	втДанныеОтправителяИПолучателя.ОрганизацияПолучатель КАК ОрганизацияПолучатель,
	|	втДанныеОтправителяИПолучателя.КонтрагентПолучатель КАК КонтрагентПолучатель,
	|	втДанныеОтправителяИПолучателя.СкладПолучатель КАК СкладПолучатель,
	|	ЕСТЬNULL(СоглашенияСКлиентами.Ссылка, ЗНАЧЕНИЕ(Справочник.СоглашенияСКлиентами.ПустаяСсылка)) КАК СоглашениеРеализации,
	|	ЕСТЬNULL(СоглашенияСКлиентами.ит_Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорРеализации,
	|	ЕСТЬNULL(СоглашенияСПоставщиками.Ссылка, ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяССылка)) КАК СоглашениеПриобретения,
	|	ЕСТЬNULL(СоглашенияСПоставщиками.ит_Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорПриобретения
	|ИЗ
	|	втДанныеОтправителяИПолучателя КАК втДанныеОтправителяИПолучателя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСКлиентами КАК СоглашенияСКлиентами
	|		ПО втДанныеОтправителяИПолучателя.ОрганизацияОтправитель = СоглашенияСКлиентами.Организация
	|			И втДанныеОтправителяИПолучателя.КонтрагентПолучатель = СоглашенияСКлиентами.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияСПоставщиками КАК СоглашенияСПоставщиками
	|		ПО втДанныеОтправителяИПолучателя.ОрганизацияПолучатель = СоглашенияСПоставщиками.Организация
	|			И втДанныеОтправителяИПолучателя.КонтрагентОтправитель = СоглашенияСПоставщиками.Контрагент";
	Запрос.УстановитьПараметр("СкладОтправитель", Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("МагазинПолучатель", Объект.МагазинПолучатель);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	//Проверка единственности соглашений 
	Если Выборка.Количество() > 1 Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Найдено несколько соглашений, проверьте корректность выбранного";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, Выборка);
	
	ЗаполнитьЦены();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДоговорПоСоглашению(Соглашение)
	Договор = Соглашение.ит_Договор;
	
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В соглашении не указан договор";
		Сообщение.Сообщить();
	КонецЕсли;
	
	Возврат Соглашение.ит_Договор;
КонецФункции

&НаКлиенте
Процедура СоглашениеПриобретенияПриИзменении(Элемент)
	Объект.ДоговорПриобретения = ПолучитьДоговорПоСоглашению(Объект.СоглашениеПриобретения);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧТовары(Товары)
	
	Для Каждого Строка Из Товары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	ЗаполнитьЦены();
	
КонецПроцедуры

&НаСервере
Процедура ОформитьПерепродажуНаСервере()
	НачатьТранзакцию();
	
	Попытка
		
		Объект.ДокументПеремещения = СформироватьПеремещение();
		Объект.ДокументРеализации = СформироватьРТУ();
		Объект.ДокументПриобретения = СформироватьПТУ();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция СформироватьРТУ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.ит_ЗаказТорговойТочки = &ЗаказТорговойТочки
	|	И НЕ РеализацияТоваровУслуг.ПометкаУдаления";
	Запрос.УстановитьПараметр("ЗаказТорговойТочки", Объект.Заказ);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НовыйДокумент = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НовыйДокумент = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеПриобретения, "Валюта");
	НовыйДокумент.ит_ЗаказТорговойТочки = Объект.Заказ;
	НовыйДокумент.Валюта = Валюта;
	НовыйДокумент.ВалютаВзаиморасчетов = Валюта;
	НовыйДокумент.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.РеализацияТоваровУслуг;
	НовыйДокумент.Договор = Объект.ДоговорРеализации;
	НовыйДокумент.Дата = Объект.ДатаЗаказа;
	НовыйДокумент.Контрагент = Объект.КонтрагентПолучатель;
	НовыйДокумент.КурсЗнаменатель = 1;
	НовыйДокумент.КурсЧислитель = 1;
	НовыйДокумент.Менеджер = Пользователи.ТекущийПользователь();
	НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	НовыйДокумент.Организация = Объект.ОрганизацияОтправитель;
	НовыйДокумент.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтрагентПолучатель, "Партнер");
	НовыйДокумент.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорРеализации, "ПорядокРасчетов");
	НовыйДокумент.СкидкиРассчитаны = Истина;
	НовыйДокумент.Склад = Объект.СкладОтправитель;
	НовыйДокумент.Согласован = Истина;
	НовыйДокумент.Соглашение = Объект.СоглашениеРеализации;
	НовыйДокумент.СпособДоставки = Перечисления.СпособыДоставки.Самовывоз;
	НовыйДокумент.Статус = Перечисления.СтатусыРеализацийТоваровУслуг.Отгружено;
	НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	НовыйДокумент.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеРеализации, "ЦенаВключаетНДС");
	
	НовыйДокумент.Товары.Очистить();
	
	Для Каждого Строка Из ТоварыДляРеализации Цикл
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КоличествоУпаковок = Строка.Количество;
		НоваяСтрока.Склад = Объект.СкладОтправитель;
		НоваяСТрока.Сумма = Строка.Количество * Строка.Цена;
		НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "СтавкаНДС");
		
		ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		НоваяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			НоваяСтрока.Сумма,
			ТекПроцентНДС,
			НовыйДокумент.ЦенаВключаетНДС,
			Неопределено);
			
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);	
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Возврат НовыйДокумент.Ссылка;
	Исключение
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Документы.РеализацияТоваровУслуг.ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция СформироватьПеремещение()
	
	НайтиОстатки();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПеремещениеТоваров.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПеремещениеТоваров КАК ПеремещениеТоваров
	|ГДЕ
	|	НЕ ПеремещениеТоваров.ПометкаУдаления
	|	И ПеремещениеТоваров.ит_ЗаказТорговойТочки = &Заказ";
	//Нужно разобраться с хранилищем и добавить реквизит ит_ЗаказТорговойТочки в ПеремещениеТоваров
	//Запрос.УстановитьПараметр("Заказ", Объект.Заказ);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		НовыйДокумент = Документы.ПеремещениеТоваров.СоздатьДокумент();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НовыйДокумент = Выборка.Ссылка.ПолучитьОбъект();
	КонецЕсли;
	
	НовыйДокумент.Дата = Объект.ДатаЗаказа;
	НовыйДокумент.ВидЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеПриобретения, "ВидЦеныПоставщика");
	НовыйДокумент.Организация = Объект.ОрганизацияПолучатель;
	НовыйДокумент.ПеремещениеПодДеятельность = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	НовыйДокумент.СкладОтправитель = Объект.СкладОтправитель;
	НовыйДокумент.СкладПолучатель = Объект.СкладПолучатель;
	НовыйДокумент.СпособДоставки = Перечисления.СпособыДоставки.ДоКлиента;
	НовыйДокумент.Статус = Перечисления.СтатусыПеремещенийТоваров.Отгружено;
	НовыйДокумент.ХозяственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
	//НовыйДокумент.ит_ЗаказТорговойТочки = Объект.Заказ;
	
	Для Каждого Строка Из ОстаткиТоваров Цикл
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КоличествоУпаковок = Строка.Количество;
	КонецЦикла;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Возврат НовыйДокумент.Ссылка;
	Исключение
	    Сообщить(ОписаниеОшибки());
		Возврат Документы.ПеремещениеТоваров.ПустаяСсылка();
	КонецПопытки;
	  
КонецФункции

&НаСервере
Функция СформироватьПТУ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|ГДЕ
	|	ПриобретениеТоваровУслуг.ит_РТУПерезаказа = &Реализация
	|	И НЕ ПриобретениеТоваровУслуг.ПометкаУдаления";
	Запрос.УстановитьПараметр("Реализация", Объект.ДокументРеализации);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		НовыйДокумент = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		НовыйДокумент = Выборка.Ссылка.Получитьобъект();
	КонецЕсли;
	
	Валюта = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеПриобретения, "Валюта");
	
	НовыйДокумент.Дата = Объект.ДатаЗаказа;
	НовыйДокумент.ит_РТУПерезаказа = Объект.ДокументРеализации;
	НовыйДокумент.Валюта = Валюта;
	НовыйДокумент.ВалютаВзаиморасчетов = Валюта;
	НовыйДокумент.ВариантПриемкиТоваров = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорПриобретения, "ВариантПриемкиТоваров");
	НовыйДокумент.ДатаВходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРеализации, "Дата");
	НомерВходящегоДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументРеализации, "Номер");
	НовыйДокумент.НомерВходящегоДокумента = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(НомерВходящегоДокумента, Истина);
	НовыйДокумент.Договор = Объект.ДоговорПриобретения;
	НовыйДокумент.Контрагент = Объект.КонтрагентОтправитель;
	НовыйДокумент.КурсЗнаменатель = 1;
	НовыйДокумент.КурсЧислитель = 1;
	НовыйДокумент.Менеджер = Пользователи.ТекущийПользователь();
	НовыйДокумент.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	НовыйДокумент.Организация = Объект.ОрганизацияПолучатель;
	НовыйДокумент.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КонтрагентОтправитель, "Партнер");
	НовыйДокумент.ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорПриобретения, "ПорядокРасчетов");
	НовыйДокумент.Склад = Объект.СкладПолучатель;
	НовыйДокумент.Согласован = Истина;
	НовыйДокумент.Соглашение = Объект.СоглашениеПриобретения;
	НовыйДокумент.СпособДоставки = Перечисления.СпособыДоставки.СиламиПоставщикаДоНашегоСклада;
	НовыйДокумент.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	НовыйДокумент.ЦенаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеПриобретения, "ЦенаВключаетНДС");	
	
	НовыйДокумент.Товары.Очистить();
	
	Для Каждого Строка Из ТоварыДляРеализации Цикл
		НоваяСтрока = НовыйДокумент.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		НоваяСтрока.КоличествоУпаковок = Строка.Количество;
		НоваяСтрока.Склад = Объект.СкладПолучатель;
		НоваяСТрока.Сумма = Строка.Количество * Строка.Цена;
		НоваяСтрока.СтавкаНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.Номенклатура, "СтавкаНДС");
		
		ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		НоваяСтрока.СуммаНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			НоваяСтрока.Сумма,
			ТекПроцентНДС,
			НовыйДокумент.ЦенаВключаетНДС,
			Неопределено);
			
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(НовыйДокумент);	
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС", СтруктураПересчетаСуммы);	
		ОбработкаТабличнойЧастиКлиентСервер.ПересчитатьСуммуСНДСВСтрокеТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
	КонецЦикла;
	
	Попытка
		НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
		Возврат НовыйДокумент.Ссылка;
	Исключение
	    Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ОписаниеОшибки();
		Сообщение.Сообщить();
		Возврат Документы.ПриобретениеТоваровУслуг.ПустаяСсылка();
	КонецПопытки;
		
КонецФункции

&НаКлиенте
Процедура ОчиститьПоля()
	
	Объект.ДоговорПриобретения = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Объект.ДоговорРеализации = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Объект.СоглашениеПриобретения = ПредопределенноеЗначение("Справочник.СоглашенияСПоставщиками.ПустаяСсылка");
	Объект.СоглашениеРеализации = ПредопределенноеЗначение("Справочник.СоглашенияСКлиентами.ПустаяСсылка");
	Объект.КонтрагентОтправитель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.КонтрагентПолучатель = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.МагазинПолучатель = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Объект.ОрганизацияОтправитель = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Объект.ОрганизацияПолучатель = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
	Объект.ПодразделениеОтправитель = ПредопределенноеЗначение("Справочник.СтруктураПредприятия.ПустаяСсылка");
	Объект.СкладОтправитель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	Объект.СкладПолучатель = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЦены()
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыЦен.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втВидЦены
	|ИЗ
	|	Справочник.ВидыЦен КАК ВидыЦен
	|ГДЕ
	|	ВидыЦен.Ссылка = &ВидЦены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТовары.Номенклатура КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	ВидЦены.Ссылка КАК ВидЦены
	|ПОМЕСТИТЬ втТоварыСВидомЦен
	|ИЗ
	|	втТовары КАК втТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидЦены КАК ВидЦены
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТоварыСВидомЦен.Номенклатура КАК Номенклатура,
	|	втТоварыСВидомЦен.Количество КАК Количество,
	|	ЦеныНоменклатуры25СрезПоследних.Цена КАК Цена
	|ИЗ
	|	втТоварыСВидомЦен КАК втТоварыСВидомЦен
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры25.СрезПоследних КАК ЦеныНоменклатуры25СрезПоследних
	|		ПО втТоварыСВидомЦен.Номенклатура = ЦеныНоменклатуры25СрезПоследних.Номенклатура
	|			И втТоварыСВидомЦен.ВидЦены = ЦеныНоменклатуры25СрезПоследних.ВидЦены";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ВидЦены", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СоглашениеРеализации, "ВидЦен"));
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	Объект.Товары.Очистить();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НайтиОстатки()
	
	//Поиск остатков на складе, зарегестрированных на покупающей организации и формирование таблиц для создания документов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.Количество КАК Количество,
	|	Товары.ВидЦены КАК ВидЦены,
	|	Товары.Цена КАК Цена
	|ПОМЕСТИТЬ втТчТовары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТчТовары.Номенклатура КАК Номенклатура,
	|	втТчТовары.Количество КАК Количество,
	|	втТчТовары.ВидЦены КАК ВидЦены,
	|	втТчТовары.Цена КАК Цена,
	|	ЕСТЬNULL(ТоварыОрганизацийОстатки.КоличествоОстаток, 0) КАК Остаток
	|ИЗ
	|	втТчТовары КАК втТчТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций.Остатки(
	|				&ДатаДокумента,
	|				АналитикаУчетаНоменклатуры.МестоХранения = &Склад
	|					И Организация = &Организация
	|					И АналитикаУчетаНоменклатуры.Номенклатура В
	|						(ВЫБРАТЬ
	|							втТчТовары.Номенклатура КАК Номенклатура
	|						ИЗ
	|							втТчТовары КАК втТчТовары)) КАК ТоварыОрганизацийОстатки
	|		ПО втТчТовары.Номенклатура = ТоварыОрганизацийОстатки.АналитикаУчетаНоменклатуры.Номенклатура";
	Запрос.УстановитьПараметр("Товары", Объект.Товары.Выгрузить());
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.ДатаЗаказа);
	Запрос.УстановитьПараметр("Склад", Объект.СкладОтправитель);
	Запрос.УстановитьПараметр("Организация", Объект.ОрганизацияПолучатель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТоварыДляРеализации.Очистить();
	ОстаткиТоваров.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Остаток >= Выборка.Количество Тогда
			СтрокаОстаткиТоваров = ОстаткиТоваров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаОстаткиТоваров, Выборка);
		Иначе
			СтрокаРеализации = ТоварыДляРеализации.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеализации,Выборка);
			
			Если Выборка.Остаток <> 0 Тогда
				СтрокаРеализации.Количество = Выборка.Количество - Выборка.Остаток;
				
				СтрокаОстаткиТоваров = ОстаткиТоваров.Добавить();
				СтрокаОстаткиТоваров.Номенклатура = Выборка.Номенклатура;
				СтрокаОстаткиТоваров.Количество = Выборка.Остаток;
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти





